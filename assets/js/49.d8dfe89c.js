(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{188:function(a,r,t){"use strict";t.r(r);var e=t(2),s=Object(e.a)({},function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("本文志在彻底学以致用JavaScript数组之循环！\n")]),a._v(" "),t("blockquote",[t("p",[a._v("最近做了一个新项目，闲暇review了下代码，发现自己用了很多for循环（简洁明了），再看下别人的代码几乎没有"),t("code",[a._v("for")]),a._v("，几乎全是"),t("code",[a._v("foreach")]),a._v("和"),t("code",[a._v("map")]),a._v("循环，难道是我写的太low了吗？其实在写码的时候有时候也有选择恐慌症，到底该用哪种循环，最后发现其他方法总是不能为我所用，最后总是选择了最简单的"),t("code",[a._v("for")]),a._v("，怎一个好用了得，也早想花点时间好好研究比较一下数组的这些循环方法，下面就开始正文啦😄！")])]),a._v(" "),t("h1",{attrs:{id:"_1-在es5中常用的10种数组遍历方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-在es5中常用的10种数组遍历方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. 在ES5中常用的10种数组遍历方法:")]),a._v(" "),t("ol",[t("li",[a._v("for循环语句")]),a._v(" "),t("li",[a._v("Array.prototype.forEach")]),a._v(" "),t("li",[a._v("Array.prototype.map")]),a._v(" "),t("li",[a._v("Array.prototype.filter")]),a._v(" "),t("li",[a._v("Array.prototype.reduce")]),a._v(" "),t("li",[a._v("Array.prototype.some")]),a._v(" "),t("li",[a._v("Array.prototype.every")]),a._v(" "),t("li",[a._v("Array.prototype.indexOf")]),a._v(" "),t("li",[a._v("Array.prototype.lastIndexOf")]),a._v(" "),t("li",[a._v("for...in循环语句")])]),a._v(" "),t("h3",{attrs:{id:"_1-for：简洁明了，通俗易懂，可能需要多写点代码，多定义几个变量，但是为我所用，为我所爱。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-for：简洁明了，通俗易懂，可能需要多写点代码，多定义几个变量，但是为我所用，为我所爱。","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. for：简洁明了，通俗易懂，可能需要多写点代码，多定义几个变量，但是为我所用，为我所爱。")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("「普通版」\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//[2, 4, 6, 8, 10]")]),a._v("\n \n「升级版」\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" arr "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//[2, 4, 6, 8, 10]")]),a._v("\n")])])]),t("h3",{attrs:{id:"_2-foreach：接收两个参数，第一个参数是在每一项上运行的函数（拥有三个参数），第二个参数「可选的」是运行该函数的作用域对象（影响this的值），return不能中断函数继续执行，所以没有返回值，不能改变原数组，使用方便一般用来代替for，但是没for性能高，而且有兼容性（ie6-8）。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-foreach：接收两个参数，第一个参数是在每一项上运行的函数（拥有三个参数），第二个参数「可选的」是运行该函数的作用域对象（影响this的值），return不能中断函数继续执行，所以没有返回值，不能改变原数组，使用方便一般用来代替for，但是没for性能高，而且有兼容性（ie6-8）。","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. forEach：接收两个参数，第一个参数是在每一项上运行的函数（拥有三个参数），第二个参数「可选的」是运行该函数的作用域对象（影响this的值），return不能中断函数继续执行，所以没有返回值，不能改变原数组，使用方便一般用来代替for，但是没for性能高，而且有兼容性（IE6-8）。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, 2, 3, 4, 5];\narr.forEach((value, index, array) => {\n    return value * 2;\n});\nconsole.log(arr);  //[1, 2, 3, 4, 5]\n")])])]),t("h3",{attrs:{id:"_3-map：基本用法和foreach相同，不同的是可以return返回值-但是不改变原数组，一般用来修改数组的值从而映射为一个新数组。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-map：基本用法和foreach相同，不同的是可以return返回值-但是不改变原数组，一般用来修改数组的值从而映射为一个新数组。","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. map：基本用法和foreach相同，不同的是可以return返回值,但是不改变原数组，一般用来修改数组的值从而映射为一个新数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, 2, 3, 4, 5];\nlet arrs = arr.map((value, index, array) => {\n    return value * 2;\n});\nconsole.log(arrs); //[2, 4, 6, 8, 10]\n")])])]),t("h3",{attrs:{id:"_4-filter：顾名思义是-过滤-，就是去掉不想要的值，return-true为想要的值，return-false则为去掉的值，一般用来过滤一个数组，不改变原来的数组。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-filter：顾名思义是-过滤-，就是去掉不想要的值，return-true为想要的值，return-false则为去掉的值，一般用来过滤一个数组，不改变原来的数组。","aria-hidden":"true"}},[a._v("#")]),a._v(' 4. filter：顾名思义是"过滤"，就是去掉不想要的值，'),t("code",[a._v("return true")]),a._v("为想要的值，"),t("code",[a._v("return false")]),a._v("则为去掉的值，一般用来过滤一个数组，不改变原来的数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, 2, 3, 4, 5];\nlet arrs = arr.filter((value, index, array) => {\n    if (value > 2) {\n        return true;\n    } else {\n        return false;\n    }\n});\nconsole.log(arrs); //[3, 4, 5]\n")])])]),t("h3",{attrs:{id:"_5-reduce：可以实现一个累加器的功能，将数组的每个值（从左到右）累加起来，不同的是有四个参数，prev表示前两个值的和（没有定义初始值时为第一个值），next为后一个值。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-reduce：可以实现一个累加器的功能，将数组的每个值（从左到右）累加起来，不同的是有四个参数，prev表示前两个值的和（没有定义初始值时为第一个值），next为后一个值。","aria-hidden":"true"}},[a._v("#")]),a._v(" 5. reduce：可以实现一个累加器的功能，将数组的每个值（从左到右）累加起来，不同的是有四个参数，prev表示前两个值的和（没有定义初始值时为第一个值），next为后一个值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, 2, 3, 4, 5];\nlet arrs = arr.reduce((prev, next, index, array) => {\n    console.log(prev);   // 1，3，6，10\n    console.log(next);   // 2，3，4，5\n    return prev + next;\n});\nconsole.log(arrs);  //15\n")])])]),t("h3",{attrs:{id:"_6-some：类似于filter，不同的是返回值为boolean-不是筛选一个新的数组，而是筛选有没符合条件的值，只要有一个值满足即立刻返回true，不再继续执行，否则返回false。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-some：类似于filter，不同的是返回值为boolean-不是筛选一个新的数组，而是筛选有没符合条件的值，只要有一个值满足即立刻返回true，不再继续执行，否则返回false。","aria-hidden":"true"}},[a._v("#")]),a._v(" 6. some：类似于filter，不同的是返回值为"),t("code",[a._v("Boolean")]),a._v(",不是筛选一个新的数组，而是筛选有没符合条件的值，只要有一个值满足即立刻返回true，不再继续执行，否则返回false。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, 2, 3, 4, 5];\nlet arrs = arr.some((value, index, array) => {\n    return value > 3;\n});\nconsole.log(arrs); // true\n")])])]),t("h3",{attrs:{id:"_7-every：类似于some，不同的是找到符合条件的值会继续执行，如果每个值都满足条件才会返回true，否则就是false。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-every：类似于some，不同的是找到符合条件的值会继续执行，如果每个值都满足条件才会返回true，否则就是false。","aria-hidden":"true"}},[a._v("#")]),a._v(" 7. every：类似于some，不同的是找到符合条件的值会继续执行，如果每个值都满足条件才会返回true，否则就是false。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, 2, 3, 4, 5];\nlet arrs = arr.every((value, index, array) => {\n    return value > 3;\n});\nconsole.log(arrs);  //false\n \nlet arr = [ 4, 5];\nlet arrs = arr.every((value, index, array) => {\n    return value > 3;\n});\nconsole.log(arrs);  //true\n")])])]),t("h3",{attrs:{id:"_8-indexof：数组中的这个方法和字符串中的几乎一样，都是找到一个满足条件的值就不继续执行了，返回值是满足条件值的下标，否则返回-1。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-indexof：数组中的这个方法和字符串中的几乎一样，都是找到一个满足条件的值就不继续执行了，返回值是满足条件值的下标，否则返回-1。","aria-hidden":"true"}},[a._v("#")]),a._v(" 8. indexOf：数组中的这个方法和字符串中的几乎一样，都是找到一个满足条件的值就不继续执行了，返回值是满足条件值的下标，否则返回-1。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, 2, 3, 4, 5];\nlet arrs = arr.indexOf(2);\nconsole.log(arrs);  // 1\n \nlet arr = [1, 2, 3, 4, 5];\nlet arrs = arr.indexOf(6);\nconsole.log(arrs); // -1\n")])])]),t("h3",{attrs:{id:"_9-lastindexof：类似于indexof，不同的是查找方向是从后向前。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-lastindexof：类似于indexof，不同的是查找方向是从后向前。","aria-hidden":"true"}},[a._v("#")]),a._v(" 9. lastIndexOf：类似于indexOf，不同的是查找方向是从后向前。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, 2, 3, 4, 5, 1];\nlet arrs = arr.lastIndexOf(1);\nconsole.log(arrs); // 5\n \nlet arr = [1, 2, 3, 4, 5, 1];\nlet arrs = arr.lastIndexOf(6);\nconsole.log(arrs); // -1\n")])])]),t("h3",{attrs:{id:"_10-for-in：主要用来遍历对象，其实数组的本质也是以key和value的键值对存在的，数组遍历的是下标，对象遍历的是key-一般用来遍历对象。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-for-in：主要用来遍历对象，其实数组的本质也是以key和value的键值对存在的，数组遍历的是下标，对象遍历的是key-一般用来遍历对象。","aria-hidden":"true"}},[a._v("#")]),a._v(" 10. for...in：主要用来遍历对象，其实数组的本质也是以key和value的键值对存在的，数组遍历的是下标，对象遍历的是key,一般用来遍历对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let arr = [1, 2, 3, 4, 5];\nfor(let i in arr) {\n    console.log(i);  // 0, 1, 2, 3, 4\n}\n \nlet arr = {name: "lewis", age: 25};\nfor(let i in arr) {\n    console.log(i);  // name, age\n}\n')])])]),t("h1",{attrs:{id:"_2-在es6中常用的for-of数组遍历方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-在es6中常用的for-of数组遍历方法","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 在ES6中常用的"),t("code",[a._v("for...of")]),a._v("数组遍历方法:")]),a._v(" "),t("p",[t("strong",[a._v("for...of")]),a._v(":  "),t("code",[a._v("JavaScript")]),a._v("原有的"),t("code",[a._v("for...in")]),a._v("循环，只能获得对象的键名，不能直接获取键值。ES6 提供"),t("code",[a._v("for...of")]),a._v("循环，允许遍历获得键值，但是不能循环对象，一般用来循环数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arr = [1, 2, 3, 4, 5];\nfor (let i in arr) {\n  console.log(i);  // 0, 1, 2, 3, 4\n}\n \nfor (let i of arr) {\n  console.log(i);  // 1, 2, 3, 4, 5\n}\n")])])]),t("p",[t("strong",[a._v("总结：")]),a._v(" "),t("strong",[a._v("看到这里相信你已经把基本用法和示例弄的差不多了，接下来总结一下，一般的循环用"),t("code",[a._v("for")]),a._v(","),t("code",[a._v("for...in")]),a._v(","),t("code",[a._v("for...of")]),a._v("和"),t("code",[a._v("forEach")]),a._v(",需要映射为新数组的用"),t("code",[a._v("map")]),a._v("，需要筛选出想要的用"),t("code",[a._v("filter")]),a._v("，数值需要进行累加的用"),t("code",[a._v("reduce")]),a._v("，如果要找一些值用"),t("code",[a._v("some")]),a._v("和"),t("code",[a._v("every")]),a._v("，并且想知道值的具体位置的可以用"),t("code",[a._v("indexOf")]),a._v("和"),t("code",[a._v("lastIndexOf")]),a._v("，接下来就是对症下药，因地制宜了，相信你会熟练掌握并准确应用了。")])]),a._v(" "),t("h1",{attrs:{id:"_3-常用的一般数组循环for-for-in-for-of和foreach-map性能对比："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-常用的一般数组循环for-for-in-for-of和foreach-map性能对比：","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 常用的一般数组循环for,for...in,for...of和forEach/map性能对比：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let arr = Array(100).fill(5);\n \nconsole.time("for循环");\nfor(let i = 0; i < arr.length; i++) {\n    arr[i] = arr[i] * 2;\n}\nconsole.timeEnd("for循环");  // for循环: 0.041ms\n \nconsole.time("for...in循环");\nfor(let i in arr) {\n    arr[i] = arr[i] * 2;\n}\nconsole.timeEnd("for...in循环"); // for...in循环: 0.126ms\n \nconsole.time("for...of循环");\nfor(let i of arr) {\n    arr[i] = arr[i] * 2;\n}\nconsole.timeEnd("for...of循环");  // for...of循环: 3532.695ms\n \nconsole.time("forEach循环");\narr.forEach((value, index, arr) => {\n    arr[index] = value * 2;\n});\nconsole.timeEnd("forEach循环");  // forEach循环: 0.103ms\n\nconsole.time("map循环");\narr.map((value, index, arr) => {\n    arr[index] = value * 2;\n});\nconsole.timeEnd("map循环"); //map循环: 0.086ms\n')])])]),t("p",[t("strong",[a._v("哈哈，经过多次对比取平均值可以明显的看到"),t("code",[a._v("for")]),a._v("循环秒杀其他方法（这只是100个数，如果更多的数效果将会更明显），原来自己的方法一点都不low啊，只要在正确的场合应用正确的方法并简单有效才是最好的，以后一般的循环大家可以大胆的使用for循环啦！")])]),a._v(" "),t("h2",{attrs:{id:"常用的检测数组的方法："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的检测数组的方法：","aria-hidden":"true"}},[a._v("#")]),a._v(" 常用的检测数组的方法：")]),a._v(" "),t("ol",[t("li",[a._v("instanceof")]),a._v(" "),t("li",[a._v("Array.isArray()")]),a._v(" "),t("li",[a._v("Object.prototype.toString.call()  「推荐使用这个」")])])])},[],!1,null,null,null);r.default=s.exports}}]);