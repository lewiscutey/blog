(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{209:function(a,t,e){"use strict";e.r(t);var n=e(2),s=Object(n.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("本文简介一些ES6的语言特性！\n")]),a._v(" "),e("h2",{attrs:{id:"_1-const、let关键字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-const、let关键字","aria-hidden":"true"}},[a._v("#")]),a._v(" 1. const、let关键字")]),a._v(" "),e("p",[a._v("众所周知，在"),e("strong",[a._v("JavaScript")]),a._v("中，变量默认是全局性的，只存在函数级作用域，声明函数曾经是创造作用域的唯一方法。这点和其他编程语言存在差异，其他语言大多数都存在块级作用域。所以在ES6中，新提出的let关键字使这个缺陷得到了修复。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("if (true) {\n    let a = 'name';\n}\nconsole.1og (a);\n// ReferenceError:a is not defined\n")])])]),e("p",[a._v("同时还引入的概念是const,用来定义一个常量，一旦定义以后不可以修改，不过如果是引用类型的，那么可以改变它的属性。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const MYNAME = 'viking';\nMYNAME = 'kitty';\n// \"CONSTANT\" is read-only\nconst MYNAME = ({foo: 'viking'};\nMYNAME.foo = 'kitty';\n//可以正常运行\n")])])]),e("h2",{attrs:{id:"_2-函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 2. 函数")]),a._v(" "),e("h3",{attrs:{id:"箭头函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 箭头函数")]),a._v(" "),e("p",[a._v("箭头函数是一种更简单的函数声明方式，可以把它看作是一种语法糖，箭头函数永远是匿名的。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let add = (a, b) => {\n  return a + b;\n}\n//当后面是表达式(expression)的时候，还可以简写成\nlet add = (a, b) => a + b;\n//等同于\nlet add = function (a, b) {\n  return a + b;\n}\n//在回调函数中应用\nlet numbers = [1, 2, 3];\nlet doubleNumbers = numbers.map((number) => number * 2);\nconsole.log(doubleNumbers);\n//[2，4, 6]看起来很简便吧\n")])])]),e("h3",{attrs:{id:"this在箭头函数中的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this在箭头函数中的使用","aria-hidden":"true"}},[a._v("#")]),a._v(" this在箭头函数中的使用")]),a._v(" "),e("p",[a._v("在工作中经常会遇到这样的问题，就是this在一个对象方法中嵌套函数。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var age = 2;\nvar kitty= {\n  age: 1,\n  grow: function() {\n    setTimeout (function() {\n      console.log(++this.age) ;\n    }, 1000);\n  }\n};\nkitty.grow();  // 3\n")])])]),e("p",[a._v("在对象方法的嵌套函数中，this 会指向global对象，这被看作是JavaScript在设计上的一个重大缺陷，一般都会采用一些hack来解决它，如下:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let kitty = {\n  age: 1,\n  grow: function () {\n    const self = this;\n    setTimeout(function () {\n      console.log(++self.age);\n    }, 100);\n  }\n}\n//或者\nlet kitty = {\n  age: 1,\n  grow: function () {\n    setTimeout(function () {\n      console.log(++this.age);\n    }.bind(this), 100);\n  }\n}\n")])])]),e("p",[a._v("现在有了箭头函数，可以很轻松地解决这个问题。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let kitty = {\n  age: 1,\n  grow: function () {\n    setTimeout(() => {\n      console.log(this.age);\n    }, 100);\n  }\n}\n")])])]),e("h3",{attrs:{id:"函数默认参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数默认参数","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数默认参数")]),a._v(" "),e("p",[a._v("ES6没有出现之前，面对默认参数都会让人感到很痛苦，不得不采用各种hack,比如说: values = values[0]。现在一切都变得轻松很多。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function desc(name = ' Peter', age = 5) {\n  return name + ' is ' + age + ' years old ';\n}\ndesc();\n//Peter is 5 years old\n")])])]),e("h3",{attrs:{id:"rest参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest参数","aria-hidden":"true"}},[a._v("#")]),a._v(" Rest参数")]),a._v(" "),e("p",[a._v('当一个函数的最后一个参数有 “..."这样的前缀，它就会变成一个参数的数组。')]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function test(...args) {\n  console.log(args);\n}\ntest(1, 2, 3);\n// [1, 2, 3]\nfunction test2(name, ...args)(\n  console.log(args);\n}\ntest2('Peter', 2, 3);\n//[2，3]\n")])])]),e("p",[e("strong",[a._v("它和arguments有如下区别:")])]),a._v(" "),e("p",[a._v("①Rest参数只是没有指定变量名称的参数数组，而arguments是所有参数的集合;")]),a._v(" "),e("p",[a._v("②arguments 对象不是一个真正的数组，而Rest参数是一个真正的数组，可以使用各种方法，比如sort、map 等。")]),a._v(" "),e("p",[a._v("有了这两个理由，是时候告别arguments,拥抱可爱的Rest参数了。")]),a._v(" "),e("h2",{attrs:{id:"_3-展开操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-展开操作符","aria-hidden":"true"}},[a._v("#")]),a._v(" 3. 展开操作符")]),a._v(" "),e("p",[a._v("刚才在函数中讲到了使用“...”操作符来实现函数参数的数组，其实这个操作符的魔力不仅仅如此。它被称为展开操作符，允许一个表达式在某处展开，在存在多个参数(用于函数调用)、多个元素(用于数组字面量)或者多个变量(用于解构赋值)的地方就会出现这种情况。")]),a._v(" "),e("h3",{attrs:{id:"用于函数调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用于函数调用","aria-hidden":"true"}},[a._v("#")]),a._v(" 用于函数调用")]),a._v(" "),e("p",[a._v("如果在之前的JavaScript中，想让函数把一个数组依次作为参数进行调用，一般会如下这样做。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function test(x, y, z) { };\nvar args = [1, 2, 3],\ntest.apply (null, args);\n")])])]),e("p",[a._v("有了ES6的展开运算符，可以简化这个过程。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function test(x, y, z) { };\nlet args = [0，1, 2]\ntest(...args) ;\n")])])]),e("h3",{attrs:{id:"用于数组字面量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用于数组字面量","aria-hidden":"true"}},[a._v("#")]),a._v(" 用于数组字面量")]),a._v(" "),e("p",[a._v("在之前的版本中，如果想创建含有某些元素的新数组，常常会用到splice、concat、push等方法，如下。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var arrl = [1, 2, 3];\nvar arr2 = [4, 5, 6];\nvar arr3 = arr1.concat(arr2) ;\nconsole.log(arr3);\n// 1.2.3.4.5,6\n")])])]),e("p",[a._v("使用展开运算符以后就简便了很多，如下：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let arr1 = (1, 2, 3);\nlet arr2 = [4，5, 6];\nlet arr3 = [...arr1, ...arr2];\nconsole.log(arr3);\n// 1,2,3,4.5,6\n")])])]),e("h3",{attrs:{id:"对象的展开运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象的展开运算符","aria-hidden":"true"}},[a._v("#")]),a._v(" 对象的展开运算符")]),a._v(" "),e("p",[a._v("数组的展开运算符简单易用，那么对象有没有这个特性?")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let mike = {name: 'mike', age: 50};\nmlke = {...mike, sex: 'male');\nconsole.log (mike);\n/*\n[object object] {\n    age: 50，\n    name: \"mike\" ，\n    sex: \"male\"\n}\n*/\n")])])]),e("p",[a._v("对象的展开运算符其实已经被提上日程，只不过它是ES7的提案之一，它可以让你以更简洁的形式将一个对象可枚举的属性复制到另外一个对象上。这一特性可以借助后面介绍的"),e("strong",[a._v("Babel")]),a._v("和它的插件来实现。")]),a._v(" "),e("h2",{attrs:{id:"_4-模板字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-模板字符串","aria-hidden":"true"}},[a._v("#")]),a._v(" 4.模板字符串")]),a._v(" "),e("p",[a._v("在ES6之前的时代，字符串的拼接总是一件令人不爽的事情，但是在ES6来临的时代，这个痛处也要被治愈了。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//之前总会做这些事情\nvar name = 'viking';\nvar a = 'My name is ' + name + '|';\n//多行字符串\nvar longStory = 'This is a long story,'\n+ 'this is a long story',\n+ 'this is a long story.';\n// 有了ES6现在可以这样做\n// 注意这里不是引号而是这个符号\nlet name = 'viking';\nlet a = `My name is ${name} !`;\nlet longStory = `This is a long story,\nthis is a long story\nthis is a long story~`;\n//非常方便，对吧\n")])])]),e("h2",{attrs:{id:"_5-解构赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-解构赋值","aria-hidden":"true"}},[a._v("#")]),a._v(" 5. 解构赋值")]),a._v(" "),e("p",[a._v("解构语法可以快速从数组或者对象中提取变量，可以用一个表达式读取整个结构。")]),a._v(" "),e("h3",{attrs:{id:"解构数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解构数组","aria-hidden":"true"}},[a._v("#")]),a._v(" 解构数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let foo = ['one', 'two', 'three'];\nlet [one, two, three] = foo;\nconsole.log(${one}, ${two}, ${three});\n//one, two, three\n")])])]),e("h3",{attrs:{id:"解构对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解构对象","aria-hidden":"true"}},[a._v("#")]),a._v(" 解构对象")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let person = {name: 'viking', age: 20};\nlet {name, age} = person;\nconsole, log(${name}, ${age});\n//viking, 20\n")])])]),e("p",[a._v("解构赋值可以看作一种语法糖，它受Python语言的启发，可以提高效率。")]),a._v(" "),e("h2",{attrs:{id:"_6-类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-类","aria-hidden":"true"}},[a._v("#")]),a._v(" 6. 类")]),a._v(" "),e("p",[a._v("众所周知，在"),e("strong",[a._v("JavaScript")]),a._v("的世界里是没有传统类的概念的，它使用原型链的方式来完成继承，但是声明的方式看起来总是怪怪的，所以ES6提供了"),e("strong",[a._v("class")]),a._v("这个语法糖，让开发者可以模仿其他语言类的声明方式，看起来更加明确清晰。需要注意的是,"),e("strong",[a._v("class")]),a._v("并没有带来新的结构，而只是原来原型链方式的一种语法糖。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("class Animal {\n  //构造函数\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  shout() {\n    return `My name is ${this.name}, age is ${this.age}`;\n  }\n  //静态方法\n  static foo() {\n    return 'Here is a static method';\n  }\n}\n\nconst cow = new Animal('betty', 2);\ncow.shout();\n// My name is betty, age is 2\nAnimal.foo();\n//Here is a static method\nclass Dog extends Animal {\n  constructor(name, age = 2, color = 'black') {\n    //在构造函数中可以直接调用super方法\n    super(name, age);\n    this.color = color;\n  }\n  shout() {\n    //在非构造函数中不能直接使用super方法\n    //但是可以采用super(). +方法名宇调用父类方法\n    return super.shout() + `，color is ${this.color}.`;\n  }\n}\nconst jackTheDog = new Dog('jack');\njackTheDog.shout();\n//\"My name is jack, age is 2，color is black\"\n")])])]),e("h2",{attrs:{id:"_7-模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-模块","aria-hidden":"true"}},[a._v("#")]),a._v(" 7. 模块")]),a._v(" "),e("p",[e("strong",[a._v("JavaScirpt")]),a._v("模块化代码是一个古老的话题，从前端开发这个职业诞生到现在一直都在不断地进化，它的发展也从外一个侧面反映了前端项目越来越复杂、越来越工程化。")]),a._v(" "),e("p",[a._v("在ES6之前，"),e("strong",[a._v("JavaScript")]),a._v("并没有对模块做出任何定义，于是先驱者们创造了各种各样的规范来完成这个任务。伴随着"),e("strong",[a._v("Require.js")]),a._v("的流行，它所推崇的"),e("strong",[a._v("AMD")]),a._v("格式也成了开发者的首选。在这之后，"),e("strong",[a._v("Node.js")]),a._v("诞生了，随之而来的是"),e("strong",[a._v("CommonJS")]),a._v("格式，再之后"),e("strong",[a._v("browserify")]),a._v("的诞生，让浏览器端的开发也能使用这种格式。直到ES6的出现，模块这个观念才真正有了语言特性的支持，现在来看看它是如何被定义的。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//hello.js文件\n//定义一个命名为hello的函数\nfunction hello() {\n    console.log('Hello ES6');\n}\n//使用export导出这个模块\nexport hello;\n//main.js\n//使用import加载这个模块\nimport { hello } from ' ./hello';\nhello();\n//Hello ES6\n")])])]),e("p",[a._v("上面的代码就完成了模块的一个最简单的例子，使用"),e("strong",[a._v("import")]),a._v("和"),e("strong",[a._v("export")]),a._v("关键字完成模块的导入和导出。当然也可以完成一个模块的多个导出，请看下面的例子。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//hello.js\nexport const PI = 3.14;\nexport function hello() {\n    console.log('Hello ES6');\n}\nexport let person = {name: 'viking');\n//main.js\n//使用对象解构赋值加载这3个变量\nimport {PI, hello, person} from './hello';\n//也可以将这个模块全部导出\nimport * as util from './hello';\nconsole.log (util.PI);\n//3.14\n")])])]),e("p",[a._v("还可以使用"),e("strong",[a._v("default")]),a._v("关键字来实现模块的默认导出；")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//hello.js\nexport default function () (\n    console.log('Hello ES6');\n}\n//main.js\nimport hello from './hello';\nhello();\n//Hello ES6\n")])])]),e("p",[a._v("模块的官方定义对于"),e("strong",[a._v("JavaScript")]),a._v("来说是具有划时代意义的，它让各种关于"),e("strong",[a._v("JavaScript")]),a._v("模块化标准的争斗落下帷幕，开发者不用再为选择什么样的模块标准而苦恼，每个人都可以开心地使用ES6的模块标准。")]),a._v(" "),e("p",[e("em",[a._v("以上就是ES6中比较重要的一些语言特性啦！")])])])},[],!1,null,null,null);t.default=s.exports}}]);